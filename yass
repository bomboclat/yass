#!/bin/sh
###########################################################
# This script is used to convert markdown                 #
# files to html files in a new tree.                      #
# it also resolve and trasform all links in the documents #
###########################################################

usage () {
echo "
This script create static html website
from markdown:

$0 [SOURCE] [TARGET] [STATIC_DIR]

The default target was created in the source directory
under $DEFAULT_OUTPUT"
}

case "$1" in
    "--help" | "-h") usage; exit 0 ;;
    "") usage; exit 1 ;;
esac

########################################

SOURCE_DIR=$1
DEST_DIR=${2:-"./build"}
STATIC_DIR=${3:-$SOURCE_DIR/static}

SRC_SUFFIX=.md
DST_SUFFIX=.html
SMU=$(dirname $0)/lib/smu/smu
SFI=$(dirname $0)/lib/sfi/sfi

########################################
SRC_FILES=$(find $SOURCE_DIR -type f -name "*$SRC_SUFFIX")

# This function used for substrings extraction is a 
# bit tricky. I don't have found another alternative 
# to maintain the posix compatibility
tricky_links_find() {
    dst_file=$1
    # split every link to a newline and print only the
    # pattern space (to solve the greedy quantifier problem)
    sed -n '/<a href/ s/<a/\n<a/pg' $dst_file | \
    sed -n 's/.*<a href="\(.*\)">.*/\1/p'
}

build_file() {
    src_file=$1
    dst_file=$2
    # if not exist create directory path
    if [ ! -d $(dirname $dst_file) ]; then
        mkdir -p $(dirname $dst_file);
    fi
    # build the file
    $SMU $src_file | $SFI $(dirname $src_file)/template.html > $dst_file
}

build_links() {
    src_file=$1
    dst_file=$2
    links_found=$(tricky_links_find $dst_file)
    # Replace links suffix if href point to a file in SOURCE_DIR
    for link_found in $links_found; do
        if [ -f $(dirname $src_file)/$link_found ]; then
            new_link=${link_found%$SRC_SUFFIX}$DST_SUFFIX
            sed -i "s|$link_found|$new_link|g" "$dst_file"
        fi
    done
}

# Build all files
for src_file in $SRC_FILES; do
    dst_path=$DEST_DIR/${src_file#$SOURCE_DIR}
    dst_file=${dst_path%$SRC_SUFFIX}$DST_SUFFIX
    build_file $src_file $dst_file
    build_links $src_file $dst_file
done

# Copy static dir
cp -a $STATIC_DIR $DEST_DIR/
